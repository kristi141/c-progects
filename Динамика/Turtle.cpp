/*Условие:
В левом верхнем углу прямоугольной поляны размером n*m находится черепашка. 
На каждой клетке поля разлито некоторое количество кислоты. Черепашка может 
перемещаться только вправо или вниз, при этом маршрут черепашки заканчивается 
в правом нижнем углу таблицы. Каждый миллилитр кислоты приносит черепашке 
некоторое количество урона.  
Необходимо найти наименьшее возможное значение урона, которое получит 
черепашка после прогулки по поляне.
На данном изображении указан маршрут Черепашки. Минимальный урон, который 
она получит – 7. 

Входные данные:
В первой строке записаны два натуральных числа: n, m (1<=n, m<=1000) - 
размеры поляны.  
Каждая из следующих n строк содержит m чисел, разделённых пробелами - 
описание поляны с указанием для каждой клетки содержания кислоты на ней 
(в миллилитрах).

Выходные данные:
В первой строке входного файла должно быть выведено единственное значение – 
наименьшую возможную стоимость маршрута черепашки.*/

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int main() {
    long long amountAcid[1000][1000];
    long long column, line;
    cin >> column >> line;

    for (long long i = 0; i < column; ++i) {
        for (long long j = 0; j < line; ++j) {
            cin >> amountAcid[i][j];
        }
    }

    for (long long i = 1; i < line; ++i) {
        amountAcid[0][i] += amountAcid[0][i - 1];
    }

    for (long long i = 1; i < column; ++i) {
        amountAcid[i][0] += amountAcid[i - 1][0];

        for (long long j = 1; j < line; ++j) {
            amountAcid[i][j] += min(amountAcid[i - 1][j], amountAcid[i][j - 1]);
        }
    }

    cout << amountAcid[column - 1][line - 1] << endl;
    vector<char> path;
    path.reserve(column + line - 2);

    return 0;
}